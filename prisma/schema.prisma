// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  addresses     Address[]
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id       String     @id @default(cuid())
  mnName   String
  enName   String
  parentId String?
  parent   Category?  @relation("ParentCategory", fields: [parentId], references: [id])
  children Category[] @relation("ParentCategory")
  products Product[]
}

model Brand {
  id       String    @id @default(cuid())
  mnName   String
  enName   String
  products Product[]
}

model Tag {
  id       String    @id @default(cuid())
  mnName   String
  enName   String
  products Product[] @relation("ProductTags")
}

model Color {
  id       String           @id @default(cuid())
  name     String
  hex      String
  variants ProductVariant[]
}

model Size {
  id       String           @id @default(cuid())
  name     String
  variants ProductVariant[]
}

model Product {
  id         String           @id @default(cuid())
  mnName     String
  enName     String
  mnDesc     String
  enDesc     String
  price      Float
  active    Boolean           @default(true)
  // The cost price of the product, used for margin calculations and business analytics
  costPrice  Float            @default(0) 
  sku        String           @unique
  brandId    String
  brand      Brand            @relation(fields: [brandId], references: [id])
  categoryId String
  category   Category         @relation(fields: [categoryId], references: [id])
  tags       Tag[]            @relation("ProductTags")
  variants   ProductVariant[]
  createdAt  DateTime         @default(now())
}

model ProductVariant {
  id        String      @id @default(cuid())
  active    Boolean     @default(true)
  product   Product     @relation(fields: [productId], references: [id])
  productId String
  color     Color       @relation(fields: [colorId], references: [id])
  colorId   String
  size      Size?       @relation(fields: [sizeId], references: [id])
  sizeId    String?
  image     String[]
  stock     Int
  items     OrderItem[]
}

model Banner {
  id      String @id @default(cuid())
  image   String
  mnTitle String
  enTitle String
  url     String
  active  Boolean @default(true)
}

model Delivery {
  id      String  @id @default(cuid())
  mnName  String
  enName  String
  price   Float
  etaDays Int
  orders  Order[]
}

model Address {
  id         String @id @default(cuid())
  userId     String
  fullName   String
  phone      String
  user       User   @relation(fields: [userId], references: [id])
}

model Order {
  id          String        @id @default(cuid())
  userId      String
  deliveryId  String
  total       Float
  status      OrderStatus
  user        User          @relation(fields: [userId], references: [id])
  delivery    Delivery      @relation(fields: [deliveryId], references: [id])
  items       OrderItem[]
  transaction Transaction?
  createdAt   DateTime      @default(now())
}

model OrderItem {
  id               String         @id @default(cuid())
  orderId          String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId String
  quantity         Int
  unitPrice        Float
  order            Order          @relation(fields: [orderId], references: [id])
}

model Transaction {
  id        String            @id @default(cuid())
  orderId   String            @unique
  paymentId String // from Stripe or other gateway
  method    String
  status    TransactionStatus
  amount    Float
  createdAt DateTime          @default(now())
  order     Order             @relation(fields: [orderId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}